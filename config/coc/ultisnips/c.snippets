# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet \3 "Line" A
/*###################################################################*/
endsnippet


snippet \colors "colors" A
#define BLACK			"\033[0;30m"
#define RED				"\033[0;31m"
#define GREEN			"\033[0;32m"
#define ORANGE			"\033[0;33m"
#define BLUE			"\033[0;34m"
#define PURPLE			"\033[0;35m"
#define CYAN			"\033[0;36m"
#define LIGHT_GRAY		"\033[0;37m"
#define DARK_GRAY		"\033[1;30m"
#define LIGHT_RED		"\033[1;31m"
#define LIGHT_GREEN		"\033[1;32m"
#define YELLOW			"\033[1;33m"
#define LIGHT_BLUE		"\033[1;34m"
#define LIGHT_PURPLE	"\033[1;35m"
#define LIGHT_CYAN		"\033[1;36m"
#define WHITE			"\033[1;37m"
#define NO_COLOR		"\033[0m"
#define BOLD			"\e[1m"
#define _R				"\e[0m"
endsnippet

snippet \/* "Comment" A
/*
*1
*/
endsnippet

snippet \! "!" Ai
!($1)
endsnippet

snippet \malloc "malloc" A
${1:ptr} = malloc(sizeof(*${1:ptr}));
if (!(${1:ptr}))
	return (NULL);
endsnippet

snippet \void "Void" A
(void)$1;
endsnippet

snippet \wh "while" A
while ($1)
{
	$2
}
endsnippet

#snippet \if "if" A
#if ($1)
#{
	#$2
#}
endsnippet

snippet \elif "elif" A
else if ($1)
{
$1
$1

bonjour $1
	$2
}
endsnippet

snippet \else "else" A
else
{
	$1
}
endsnippet

snippet \ret "return" A
return ($1);
endsnippet


snippet \static "static int function" A
static $1	()
{

	return ();
}
endsnippet

snippet \allinc "include all libraries" A
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <pthread.h>
#include <stdarg.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/wait.h>
endsnippet

snippet \iostream "iostream" A
#include <iostream>
endsnippet


snippet \inc < "../include/" A
#include <$1.h>
endsnippet

snippet \inc1 "../include/" A
#include "../includes/$1"
endsnippet

snippet \inc2 "../../include" A
#include "../../includes/$1"
endsnippet

snippet \main "main function" A
int main(int ac, char **av, char **env)
{
	(void)ac;
	(void)av;
	(void)env;
	$1
	return (0);
}
endsnippet

##################################

snippet \pd "print d" A
printf("%s%d\n", "$1 : ", $1);
endsnippet
snippet \ps "print s" A
printf("%s%s\n", "$1 : ", $1);
endsnippet
snippet \pc "print c" A
printf("%s%c\n", "$1 : ", $1);
endsnippet
snippet \pp "print p" A
printf("%s%p\n", "$1 : ", $1);
endsnippet
snippet \pf "print f" A
printf("%s%f\n", "$1 : ", $1);
endsnippet
snippet \pl "print l" A
printf("%s%l\n", "$1 : ", $1);
endsnippet
snippet \str "print l" A
printf("$1\n");
endsnippet

##################################

snippet \p1 "print 1" A
printf("%s\n", "---- [1] ----");
endsnippet
snippet \p2 "print 2" A
printf("%s\n", "---- [2] ----");
endsnippet
snippet \p3 "print 3" A
printf("%s\n", "---- [3] ----");
endsnippet
snippet \p4 "print 4" A
printf("%s\n", "---- [4] ----");
endsnippet
snippet \p5 "print 5" A
printf("%s\n", "---- [5] ----");
endsnippet

##################################

snippet \g "g->" Ai
g->$1
endsnippet

snippet \tg "t_global *" Ai
t_global *$1
endsnippet

snippet \makefile "Makefile" A
NAME			=
EXTENSION		= cpp
CC				= clang++
DIR_HEADER		= ./
DIR_SRCS 		= ./
FLAGS			= -Wall -Wextra -Werror
RM				= /bin/rm -f
ECHO			= echo -e
SANITIZER		= -fsanitize=address -fsanitize=leak
OBJS			= ${SRCS_FILES:.${EXTENSION}=.o}
SRCS_FILES	    = \

%.o: %.${EXTENSION}
	@${ECHO} "${Y}[ COMPILING OBJS]${_R}"
	@${CC} ${FLAGS} -I ${DIR_HEADER} -o $@ -c $<

${NAME}: ${OBJS}
	@${ECHO} "${Y}[ COMPILING BIN]${_R}"
	@${CC} ${SANITIZER} -I ${DIR_HEADER} ${FLAGS} ${OBJS} -o ${NAME}
	@${ECHO} "${G}[ DONE]${_R}"

all:		${NAME}

clean:
	@${ECHO} "${R}[ CLEAN]${_R}"
	@${RM} ${OBJS}

fclean:		clean
	@${ECHO} "${R}[ FCLEAN]${_R}"
	@${RM} ${NAME}

re:			fclean all

.PHONY:\
	all fclean clean re \

BLACK			=	\033[0;30m
R				=	\033[0;31m
G				=	\033[0;32m
ORANGE			=	\033[0;33m
BLUE			=	\033[0;34m
PURPLE			=	\033[0;35m
CYAN			=	\033[0;36m
LIGHT_GRAY		=	\033[0;37m
DARK_GRAY		=	\033[1;30m
LIGHT_RED		=	\033[1;31m
LIGHT_GREEN		=	\033[1;32m
Y				=	\033[1;33m
LIGHT_BLUE		=	\033[1;34m
LIGHT_PURPLE	=	\033[1;35m
LIGHT_CYAN		=	\033[1;36m
WHITE			=	\033[1;37m
NO_COLOR		=	\033[0m
BOLD			=	\e[1m
_R				=	\e[0m

#Auto update
#@printf "\033[2K\r$(BLUE)$(NAME)$(RESET)$(BLUE): $(GREEN)Compiled [√]$(RESET)\n"
endsnippet
