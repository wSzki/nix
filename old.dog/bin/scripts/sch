#!/bin/sh

#dependencies : at, dunst, notify-send, sms

ntf_wait ()
{
	while ! pgrep -f "dunst" > /dev/null; do
		# Set optional delay
		sleep 5
	done
}


if [[ -f "/bin/bat" ]]; then CAT=bat; else CAT=cat; fi
if [[ -f "/bin/nvim" ]]; then VIM=nvim; else VIM=vim; fi

SCHEDULE_FILE=~/.dot/sch.md
BUFFER_FILE=~/.dot/sch.buffer.md

sed -i '/ﱢﱢﱢﱢﱢ /d' $SCHEDULE_FILE
echo "ﱢﱢﱢﱢﱢ `date +'%a %b %d %H:%M:%S %Y'`" >> $SCHEDULE_FILE
sed -zi 's/2021\n/2021 /g' $SCHEDULE_FILE
sed -zi 's/2022\n/2022 /g' $SCHEDULE_FILE
sed -zi 's/2023\n/2023 /g' $SCHEDULE_FILE
sed -zi 's/2024\n/2024 /g' $SCHEDULE_FILE
sort -k 6n -k 3M -k 4n $SCHEDULE_FILE > $BUFFER_FILE
mv $BUFFER_FILE $SCHEDULE_FILE
sed -i '/^$/d' $SCHEDULE_FILE

if [ $# -eq 0 ]; then
	cal -3 -m
	#sch -l
	#echo ""
	read -ep "MSG : " msg
	read -ep "DATE: " DATE


	echo "~/.dot/bin/scripts/notify-wait && notify-send $msg && echo $msg | sms" | at $TIME $DATE 2>> $SCHEDULE_FILE
	#echo "~/.dot/bin/scripts/notify-wait && notify-send $msg && echo $msg | sms" | at $date 2>> $SCHEDULE_FILE
	echo "[ $msg ]" >> $SCHEDULE_FILE
	sed -i '/ﱢﱢﱢﱢﱢ /d' $SCHEDULE_FILE
	echo "ﱢﱢﱢﱢﱢ `date +'%a %b %d %H:%M:%S %Y'`" >> $SCHEDULE_FILE
	sed -i '/warning: commands will be executed using/d' $SCHEDULE_FILE
	sed -i 's/job \(.*\) at /# /g' $SCHEDULE_FILE
	#sed -i 's/job \(.*\) at /#\1 /g' $SCHEDULE_FILE
	sed -i 's/\n/ /g' $SCHEDULE_FILE
	sed -zi 's/2021\n/2021 /g' $SCHEDULE_FILE
	sed -zi 's/2022\n/2022 /g' $SCHEDULE_FILE
	sed -zi 's/2023\n/2023 /g' $SCHEDULE_FILE
	sed -zi 's/2024\n/2024 /g' $SCHEDULE_FILE
	sort -t ' ' -k 6n -k 3M -k 4n $SCHEDULE_FILE > $BUFFER_FILE
	mv $BUFFER_FILE $SCHEDULE_FILE
	sed -i '/^$/d' $SCHEDULE_FILE
	sch -l
	#$CAT $SCHEDULE_FILE
	exit 0
fi

if [ $1 == "-e" ]; then
	$VIM $SCHEDULE_FILE;
fi

if [ $1 == "-u" ]; then
	exit 0;
fi

if [ $1 == "-l" ]; then
	$CAT $SCHEDULE_FILE
fi

if [ $1 == "-n" ]; then
	next_event=`sch -u && grep -a1 "ﱢﱢﱢﱢﱢ" ~/.dot/sch.md | tail -n1`
	next_event_timestamp=`echo $next_event | awk '{print $2" "$3" "$4" "$5" "$6}'`
	next_event_task=`echo $next_event | grep -o "\[.*"`
	current_timestamp=`date +%s`
	event_timestamp=`date -d"$next_event_timestamp" +%s`
	seconds_to_next_event=$((event_timestamp - current_timestamp))

	days_left=`eval "echo $(date -ud "@$seconds_to_next_event" +'$((%s/3600/24))')"`
	hours_left=`eval "echo $(date -ud "@$seconds_to_next_event" +'%H')"`

	if [ $days_left -lt 1 ]; then
		if [ $hours_left -lt 1 ]; then
			eval "echo \"<span color='white' bgcolor='#cc241d'> 鬒 $(date -ud "@$seconds_to_next_event" +'$((%s/3600/24)) days %H:%M') $next_event_task </span>\""
		elif [ $hours_left -lt 3 ]; then
			eval "echo \"<span color='#191d20' bgcolor='#fb4934'> 鬒 $(date -ud "@$seconds_to_next_event" +'$((%s/3600/24)) days %H:%M') $next_event_task </span>\""
		elif [ $hours_left -lt 6 ]; then
			eval "echo \"<span color='#191d20' bgcolor='#ea6962'> 鬒 $(date -ud "@$seconds_to_next_event" +'$((%s/3600/24)) days %H:%M') $next_event_task </span>\""
		else
			eval "echo \"<span  color='#191d20' bgcolor='#d8a657'> 鬒 $(date -ud "@$seconds_to_next_event" +'$((%s/3600/24)) days %H:%M') $next_event_task </span>\""
		fi
	else
		eval "echo \"<span  color='#191d20' bgcolor='#A3BE8C'> 鬒 $(date -ud "@$seconds_to_next_event" +'$((%s/3600/24)) days %H:%M') $next_event_task </span>\""
	fi
fi
















































#sed -i 's/###\(.*\) 2021/###\1/g' $SCHEDULE_FILE
#sed -i 's/job \(.*\) at /## [ job \1 ]\n/g' sch.md
#sed -i 's/job \(.*\) at /### [\1] /g' sch.md
##########
#sed -i 's/at /at\n/g' sch.md
#sed -z 's/2021\n/2021 /g' sch.md
#sort -k 6 -k 3M -k 4 -k 5 sch.md
#echo "~/.dot/bin/scripts/notify_wait.sh && notify-send $msg" | at $hh:$mm $day $num
# If the notification daemon isn't running then launch it
#if ! pgrep -f "dunst" > /dev/null; then
#/usr/lib/notification-daemon/notification-daemon &
#fi
## Wait for the notification daemon to finish launching
#while ! pgrep -f "dunst" > /dev/null; do

	## Set optional delay
	#sleep

#done
