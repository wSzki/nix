
snippet \main "Description" A
int main (int ac, char **av)
{
	$1
}

endsnippet

snippet \for "Description" A
for (int i = 0; i < $1 ; i++)
{

}
endsnippet


snippet \str "Description" A
std::string $1
endsnippet

snippet \cout "out" A
std::cout << $1 << std::endl;
endsnippet


snippet \allinc "all" A
#include <iostream>
#include <cctype>
endsnippet


snippet \ifndef "Description" A
#ifndef __$1_H__
#define __$1_H__
#include <iostream>
#include <cctype>

#endif
endsnippet

snippet except "Description" A
class $1: public std::exception
{
	public:
		virtual const char * what() const throw();
};
endsnippet

snippet \class "Description" A
class $1
{
	public:

		$1  (void);
		~$1 (void);
		$1  ($1 const &obj);

		$1 &operator = ($1 const &obj);

	private:

	protected:

};
endsnippet


snippet \constr "Description" A
#include "colors.hpp"

// DEFAULT
$1::$1 (void)
{
	std::cout << GREEN "[$1] Default constructor called\n" << _R;
}

// COPY
$1::$1($1 const &obj)
{
	std::cout << GREEN "[$1] Copy constructor called\n" << _R;
	if (this == &obj)
		return ;
	*this = obj;
}

// OVERLOADS
$1 &$1::operator = ($1 const &obj)
{
	std::cout << GREEN "[$1] Assignation operator called" << _R << std::endl;
	if (this == &obj)
		return (*this);
	*this = obj;
	//this->$2 = obj.$2
	return (*this);
}

// METHODS
//[...]

// DESTRUCTOR
$1::~$1 (void)
{
	std::cout << RED << "[$1] Destructor Called\n" <<  _R;
}
endsnippet

snippet \colors "Description" A

#ifndef __COLORS_H__
#define __COLORS_H__

#define BLACK			"\033[0;30m"
#define RED				"\033[0;31m"
#define GREEN			"\033[0;32m"
#define ORANGE			"\033[0;33m"
#define BLUE			"\033[0;34m"
#define PURPLE			"\033[0;35m"
#define CYAN			"\033[0;36m"
#define LIGHT_GRAY		"\033[0;37m"
#define DARK_GRAY		"\033[1;30m"
#define LIGHT_RED		"\033[1;31m"
#define LIGHT_GREEN		"\033[1;32m"
#define YELLOW			"\033[1;33m"
#define LIGHT_BLUE		"\033[1;34m"
#define LIGHT_PURPLE	"\033[1;35m"
#define LIGHT_CYAN		"\033[1;36m"
#define WHITE			"\033[1;37m"
#define NO_COLOR		"\033[0m"
#define BOLD			"\e[1m"
#define _R				"\e[0m"
#define _CLEAR			std::cout << "\x1B[2J\x1B[H"

#endif

endsnippet
